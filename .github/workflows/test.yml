name: Build-cyber-aib-standard
on:
  workflow_dispatch:
on:  
  workflow_dispatch:  
    inputs:
      board:
        required: true
      flavor:
        required: true
      release-id:
        required: false
      github-token:
        required: false


jobs:
  prepare_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYYMMDD-HHmm'
      - name: Create empty release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.time.outputs.time }}
          body_path: README.md
          token: ${{ secrets.GITHUB_TOKEN }}
          target_commitish: main
          draft: false
    outputs:
      release_id: ${{ steps.release.outputs.id }}
  build:
    runs-on: ubuntu-latest
    needs: prepare_release
    strategy:
      matrix:
        BOARD: [cyber-aib]
        DISTRO: [armbian]
        FLAVOR: [ubuntu]
        BRANCH: [vendor]
    steps:
      - name: Check Pre Sources
        shell: bash
        run: |
          DEL_PATH=$(pwd)
          cd .. && rm -rf ${DEL_PATH}
          mkdir ${DEL_PATH} && cd ${DEL_PATH}
      - name: Checkout
        uses: actions/checkout@v2

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: chainsx/armbian-cyber-aib
          ref: main
          path: build
      - name: Set env
        shell: bash
        run: |
          if [ ${{ inputs.flavor }} == "debian" ]
          then
            echo "release=bullseye" >> $GITHUB_ENV
            echo "build-minimal=yes" >> $GITHUB_ENV
            echo "build-desktop=no" >> $GITHUB_ENV
            echo "expert=no" >> $GITHUB_ENV
          elif [ ${{ inputs.flavor }} == "ubuntu" ]
          then
            echo "release=jammy" >> $GITHUB_ENV
            echo "build-minimal=no" >> $GITHUB_ENV
            echo "build-desktop=no" >> $GITHUB_ENV
            echo "expert=yes" >> $GITHUB_ENV
          fi
      - name: Build
        shell: bash
        run: |
          cd ./build
          touch .ignore_changes
          
          git status
          docker pull ghcr.io/armbian/docker-armbian-build:armbian-ubuntu-jammy-latest
               
          ./compile.sh \
          BOARD=${{ inputs.board }} \
          BRANCH=${{ inputs.branch }} \
          RELEASE=${{ env.release }} \
          BUILD_MINIMAL=${{ env.build-minimal }} \
          BUILD_DESKTOP=${{ env.build-desktop }} \
          KERNEL_CONFIGURE=no \
          EXPERT=${{ env.expert }} \
          BOARD_FIRMWARE_INSTALL="-full" \
          SHARE_LOG=no \
          USE_CCACHE=yes \
          DEBUG=yes \
          VENDOR=Armbian \
          COMPRESS_OUTPUTIMAGE=sha,gpg,xz
      - name: Upload
        if: inputs.release-id != '' && inputs.github-token != ''
        uses: xresloader/upload-to-github-release@v1
        env:
            GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          release_id: ${{ inputs.release-id }}
          file: "./build/output/images/*.img.xz;./build/output/images/*.img.xz.sha;./build/output/debs/linux-*.deb"
          draft: false
      - name: Rollback release
        if: failure() && inputs.release-id != '' && inputs.github-token != ''
        uses: author/action-rollback@stable
        env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
        with:
          release_id: ${{ inputs.release-id }}
      - name: Delete cache
        if: inputs.release-id != '' && inputs.github-token != ''
        shell: bash
        run: |
          sudo rm -rf ./build

        
      - name: Upload Armbian image
        uses: ncipollo/release-action@main
        if: matrix.DISTRO == 'armbian'
        with:
          branch: ${{ matrix.BRANCH }}
          board: ${{ matrix.BOARD }}
          flavor: ${{ matrix.FLAVOR }}
          release-id: ${{ needs.prepare_release.outputs.release_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
